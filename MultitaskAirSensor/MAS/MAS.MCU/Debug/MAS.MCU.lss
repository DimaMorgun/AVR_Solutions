
MAS.MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000064  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000044e  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003bf  00000000  00000000  0000059a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022e  00000000  00000000  00000959  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000b88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ed  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00000ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000ef1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	05 d0       	rcall	.+10     	; 0x28 <main>
  1e:	20 c0       	rjmp	.+64     	; 0x60 <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <_Z17PinInitializationv>:

#include <avr/io.h>

void PinInitialization()
{
	DDRB = 0b001000;
  22:	88 e0       	ldi	r24, 0x08	; 8
  24:	87 bb       	out	0x17, r24	; 23
  26:	08 95       	ret

00000028 <main>:
}

int main(void)
{
	PinInitialization();
  28:	fc df       	rcall	.-8      	; 0x22 <_Z17PinInitializationv>
	
	while (1)
	{
		PORTB = 0b001000;
  2a:	88 e0       	ldi	r24, 0x08	; 8
  2c:	88 bb       	out	0x18, r24	; 24
		PORTB |= (1<<3);
  2e:	88 b3       	in	r24, 0x18	; 24
  30:	88 60       	ori	r24, 0x08	; 8
  32:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  34:	2f e3       	ldi	r18, 0x3F	; 63
  36:	8d e0       	ldi	r24, 0x0D	; 13
  38:	93 e0       	ldi	r25, 0x03	; 3
  3a:	21 50       	subi	r18, 0x01	; 1
  3c:	80 40       	sbci	r24, 0x00	; 0
  3e:	90 40       	sbci	r25, 0x00	; 0
  40:	e1 f7       	brne	.-8      	; 0x3a <main+0x12>
  42:	00 c0       	rjmp	.+0      	; 0x44 <__DATA_REGION_LENGTH__+0x4>
  44:	00 00       	nop
		_delay_ms(1000);
		PORTB |= (0<<3);
  46:	88 b3       	in	r24, 0x18	; 24
  48:	88 bb       	out	0x18, r24	; 24
		PORTB = 0b000000;
  4a:	18 ba       	out	0x18, r1	; 24
  4c:	2f e3       	ldi	r18, 0x3F	; 63
  4e:	8d e0       	ldi	r24, 0x0D	; 13
  50:	93 e0       	ldi	r25, 0x03	; 3
  52:	21 50       	subi	r18, 0x01	; 1
  54:	80 40       	sbci	r24, 0x00	; 0
  56:	90 40       	sbci	r25, 0x00	; 0
  58:	e1 f7       	brne	.-8      	; 0x52 <__DATA_REGION_LENGTH__+0x12>
  5a:	00 c0       	rjmp	.+0      	; 0x5c <__DATA_REGION_LENGTH__+0x1c>
  5c:	00 00       	nop
  5e:	e5 cf       	rjmp	.-54     	; 0x2a <main+0x2>

00000060 <_exit>:
  60:	f8 94       	cli

00000062 <__stop_program>:
  62:	ff cf       	rjmp	.-2      	; 0x62 <__stop_program>
