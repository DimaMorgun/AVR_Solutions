
LogicalOperations.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000062  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000039d  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000321  00000000  00000000  000004f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000165  00000000  00000000  00000812  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000978  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002bd  00000000  00000000  000009bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00000c79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	16 d0       	rcall	.+44     	; 0x4a <main>
  1e:	1f c0       	rjmp	.+62     	; 0x5e <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <_Z12setOddOutputv>:
#include <util/delay.h>
#include <avr/io.h>

void setOddOutput(void){
	// Set PB2 bit in PORT register to 1;
	PORTB |= (1<<2);
  22:	88 b3       	in	r24, 0x18	; 24
  24:	84 60       	ori	r24, 0x04	; 4
  26:	88 bb       	out	0x18, r24	; 24
	// Set PB3 bit in PORT register to 0;
	PORTB &= ~(1<<3);
  28:	88 b3       	in	r24, 0x18	; 24
  2a:	87 7f       	andi	r24, 0xF7	; 247
  2c:	88 bb       	out	0x18, r24	; 24
	// Set PB4 bit in PORT register to 1;
	PORTB |= (1<<4);
  2e:	88 b3       	in	r24, 0x18	; 24
  30:	80 61       	ori	r24, 0x10	; 16
  32:	88 bb       	out	0x18, r24	; 24
  34:	08 95       	ret

00000036 <_Z13setEvenOutputv>:
}

void setEvenOutput(void){
	// Set PB2 bit in PORT register to 0;
	PORTB &= ~(1<<2);
  36:	88 b3       	in	r24, 0x18	; 24
  38:	8b 7f       	andi	r24, 0xFB	; 251
  3a:	88 bb       	out	0x18, r24	; 24
	// Set PB3 bit in PORT register to 1;
	PORTB |= (1<<3);
  3c:	88 b3       	in	r24, 0x18	; 24
  3e:	88 60       	ori	r24, 0x08	; 8
  40:	88 bb       	out	0x18, r24	; 24
	// Set PB4 bit in PORT register to 0;
	PORTB &= ~(1<<4);
  42:	88 b3       	in	r24, 0x18	; 24
  44:	8f 7e       	andi	r24, 0xEF	; 239
  46:	88 bb       	out	0x18, r24	; 24
  48:	08 95       	ret

0000004a <main>:
int main(void)
{
	// DDRB, PORTB and PINB are rigisters;
	
	// Set PB0, PB1 and PB5 bits as input and PB2, PB3, PB4 bits as output;
	DDRB = 0b011100;
  4a:	8c e1       	ldi	r24, 0x1C	; 28
  4c:	87 bb       	out	0x17, r24	; 23
	// Enable pull-up resistor in PB0 bit (because this bit is in input mode);
	// Disable pull-up resistors in PB1 and PB5 bits (because this bit is in input mode);
	// Set PB2, PB3 and PB4 bits as 1;
	PORTB = 0b011101;
  4e:	8d e1       	ldi	r24, 0x1D	; 29
  50:	88 bb       	out	0x18, r24	; 24
	
	while (1)
	{
		if (PINB & (1<<0))
  52:	b0 9b       	sbis	0x16, 0	; 22
  54:	02 c0       	rjmp	.+4      	; 0x5a <main+0x10>
		{
			setOddOutput();
  56:	e5 df       	rcall	.-54     	; 0x22 <_Z12setOddOutputv>
  58:	fc cf       	rjmp	.-8      	; 0x52 <main+0x8>
		}
		else
		{
			setEvenOutput();
  5a:	ed df       	rcall	.-38     	; 0x36 <_Z13setEvenOutputv>
  5c:	fa cf       	rjmp	.-12     	; 0x52 <main+0x8>

0000005e <_exit>:
  5e:	f8 94       	cli

00000060 <__stop_program>:
  60:	ff cf       	rjmp	.-2      	; 0x60 <__stop_program>
